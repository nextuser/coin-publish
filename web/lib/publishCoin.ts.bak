import fs from 'fs';
import path from 'path';
import { bcs } from '@mysten/bcs';

//import bytecode_template from '@mysten/move-bytecode-template/move_bytecode_template/move_bytecode_template';
import * as template from  '../pkg/move_bytecode_template';
import { fromBase64 } from '@mysten/bcs';
import { fromHex } from '@mysten/bcs';
import { toHex } from '@mysten/bcs';
import { assert } from 'console';
import { Transaction } from '@mysten/sui/transactions';
import {getSigner,getLocalSigner} from './sui/local_key';
import { SuiClient,getFullnodeUrl } from '@mysten/sui/client';
import { test_env as env } from "./sui/config";
import { threadId } from 'worker_threads';
import dotenv from 'dotenv'


type DumpFormat ={
    modules : string[],
    dependencies:string[],
    digest : Uint8Array[]
}


type PublishCoinParams =  {
    module_name:string,
    coin_name : string,
    symbol :string ,
    decimal:number,
    desc:string ,initialSupply : string, imageUrl? : string
}

function coinTemplateBytes2() : [ Uint8Array,string[]]{
    let file = path.resolve(__dirname, '../../contracts/coin_simple/out.json');
    let json = JSON.parse(String(fs.readFileSync(file))) as DumpFormat;
    let bytecode : Uint8Array =  fromBase64(json.modules[0]);
    ///console.log("coinTemplateBytes2 hex:",toHex(bytecode));
    return [bytecode,json.dependencies];
}


async function publishCoin(params : PublishCoinParams){
    //let version = template.version();
    //console.log(version);
    console.log("publish coin");

    let [bytecode,deps] = coinTemplateBytes2();
    console.log("bytecode length :",bytecode.length);

    
    let jsonRet = template.deserialize(bytecode);
    let bytes = template.serialize(jsonRet);
    assert(bytes.length == bytecode.length);
    // console.log("jsonRet",jsonRet);
    // console.log("bytes ",bytes);
    // console.log("bytecodes ",json.modules[0]);

    
    // please, manually scan the existing values, this operation is very sensitive
    console.log("constants:",template.get_constants(bytecode));

    let updated = template.update_identifiers(bytecode, {
        "TEMPLATE": params.module_name.toUpperCase(),
        "template": params.module_name
    });


    // Update DECIMALS
    updated = template.update_constants(
        updated,
        bcs.u8().serialize(params.decimal).toBytes(), // new value
        bcs.u8().serialize(6).toBytes(), // current value
        'U8', // type of the constant
    );

    // Update SYMBOL
    updated = template.update_constants(
        updated,
        bcs.string().serialize(params.symbol).toBytes(), // new value
        bcs.string().serialize('SYMBOL_TEMPLATE').toBytes(), // current value
        'Vector(U8)', // type of the constant
    );

    // Update NAME
    updated = template.update_constants(
        updated,
        bcs.string().serialize(params.coin_name).toBytes(), // new value
        bcs.string().serialize('COIN_NAME_TEMPLATE').toBytes(), // current value
        'Vector(U8)', // type of the constant
    );


    // Update desc
    updated = template.update_constants(
        updated,
        bcs.string().serialize(params.desc).toBytes(), // new value
        bcs.string().serialize('COIN_DESCRIPTION_TEMPLATE').toBytes(), // current value
        'Vector(U8)', // type of the constant
    );


    // Update URL
    if(params.imageUrl){
        updated = template.update_constants(
            updated,
            bcs.string().serialize(params.imageUrl).toBytes(), // new value
            bcs.string().serialize('IMAGE_URL_TEMPLATE').toBytes(), // current value
            'Vector(U8)', // type of the constant
        );
    }


       // Update URL
    updated = template.update_constants(
        updated,
        bcs.u64().serialize(params.initialSupply).toBytes(), // new value
        bcs.u64().serialize('1000000').toBytes(), // current value
        'U64', // type of the constant
    );
    let signer = getLocalSigner();
    let tx = new Transaction();
    let arr = updated as unknown as number[];
    let modules :number [][] = [];
    modules.push(arr)
    const [upgradeCap] = tx.publish({ modules, dependencies:deps });
    tx.transferObjects([upgradeCap], signer.getPublicKey().toSuiAddress());
    tx.setGasBudget(1e8);
    
    let config = env.config();
    const suiClient = new SuiClient({ url: getFullnodeUrl(config.env) });    
    let balance = await suiClient.getBalance({owner:signer.getPublicKey().toSuiAddress()});


    const result = await suiClient.signAndExecuteTransaction({
        signer: signer,
        transaction: tx,
        options: {
            showEffects: true,
            showObjectChanges:true,
            showEvents:true
        },
        requestType: 'WaitForLocalExecution',
    });


    let response  = await suiClient.waitForTransaction({ digest: result.digest });
    console.log("digest:",result.digest);

    ///console.log('Result: ', JSON.stringify(result, null, 2));

    if (result.effects?.status?.status !== 'success') {
        console.log('\n\nPublishing failed');
        return;
    } else{
        console.log("publish succeed ");
    }

    console.log("-------------------published result :\n",result);

    const createdObjectIds = result.effects.created!.map(
        (item) => {
            
            console.log("created:",item)
            return item.reference.objectId
        }
    );
    const createdObjects = await suiClient.multiGetObjects({
        ids: createdObjectIds,
        options: { showContent: true, showType: true, showOwner: true },
    });

    // let new_package = "";
    // if(createdObjects.error){
    //     console.log("error:",createdObjects.er);
    // }

    // createdObjects.for
    // )
    console.log("---------------------publishCoin :created objects:");
    createdObjects.forEach((item) => {
        if(item.data){
            console.log(item.data.objectId,item.data.type,item.data.owner);
        }
    })
    console.log("--------------------- object changes:",result.objectChanges);
    if(result.objectChanges){
        result.objectChanges.forEach((item) =>{
            if(item.type == 'published'){
                console.log('package id:',item.packageId);
            } else if (item.type == "created"){
                console.log("created objects:id, type,owner",item.objectId, item.objectType,item.owner)
            }
        })

    }
    
    console.log("--------------------- suiClient.queryEvents:");
    let eventsDigest = result.effects.eventsDigest;
    if(eventsDigest){
        suiClient.queryEvents({query:{Transaction : result.digest }}).then((events)=>{
            events.data.forEach((item)=>{
                console.log("event:",item);    
            });
        })
    }

    let newbalance = await suiClient.getBalance({owner:signer.getPublicKey().toSuiAddress()})
    console.log("cost", (Number(newbalance.totalBalance) - Number(balance.totalBalance))/1e9);
    console.log("coin type:",balance.coinType,newbalance.coinType,balance,newbalance);
}


//https://suiscan.xyz/testnet/coin/0x747a057e094034753faac5b7a6402f6482a5cb34d05d3fcb629c519da55c5c7b::ydt::YDT/txs

if(process.env.TEST=='1'){
    publishCoin( {
        module_name:"ydt",
        coin_name : "袁大头",
        symbol : "YDT",
        decimal: 9,
        desc: "袁大头是一个有趣的代币",
        initialSupply : "1000000000000000000",
        imageUrl : "https://img.alicdn.com/bao/uploaded/i4/2211353769366/O1CN01LfIYel2J3gPxGbQws_!!0-item_pic.jpg" 
    });

}